@using DEKL.CP.Domain.Enums
@model DEKL.CP.UI.ViewModels.Provider.ProviderPhysicalPersonViewModel
<div class="container-content">

    <h2>Cadastrar Fornecedor - Pessoa Física</h2>
    <div class="row">
        <div class="col-md-8">
            <section id="registerProviderForm">
                @using (Html.BeginForm("CreateProviderPhysicalPerson", "Provider", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div class="form">
                        <h4>Preencha os dados</h4>
                        <hr />
                        @Html.ValidationMessage("Error", new { @class = "text-danger" })
                        @Html.Hidden(nameof(TypeProvider), TypeProvider.PhysicalPerson)
                        <div class="form-row">
                            <div class="form-group col-md-9">
                                @Html.LabelFor(m => m.Name, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Digite o nome completo" })
                                <small>
                                    @Html.ValidationMessageFor(m => m.Name, null, new { @class = "text-danger" })
                                </small>
                            </div>

                            <div class="form-group col-md-3">
                                @Html.LabelFor(m => m.CPF, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.CPF, new { @class = "form-control", placeholder = "000.000.000-00" })
                                <small>
                                    @Html.ValidationMessageFor(m => m.CPF, null, new { @class = "text-danger" })
                                </small>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-8">
                                @Html.LabelFor(m => m.Email, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "example@email.com" })
                                <small>
                                    @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
                                </small>
                            </div>

                            <div class="form-group col-md-4">
                                @Html.LabelFor(m => m.PhoneNumber, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", placeholder = "(99) 99999-9999" })
                                <small>
                                    @Html.ValidationMessageFor(m => m.PhoneNumber, null, new { @class = "text-danger" })
                                </small>
                            </div>
                        </div>

                        @if (Model?.Address != null)
                        {
                            @Html.Action("AddressPartialViewFilled", "Address", Model.Address)
                        }
                        else
                        {
                            @Html.Action("AddressPartialView", "Address")
                        }

                        <div class="form-group">
                            <input type="submit" value="Salvar" class="btn btn-info" />
                            @Html.ActionLink("Voltar", "Index", null, new { @class = "btn btn-info" })
                        </div>
                    </div>
                }
            </section>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}