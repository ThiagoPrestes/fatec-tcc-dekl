@model IEnumerable<DEKL.CP.UI.ViewModels.AccountsToPay.AccountToPayRelashionships>

@section styles{
    @Styles.Render("~/Content/datatables")
}
<div class="container-content">

    <h2>Simulador</h2>

    <div class="row">
        <div class="col-md-12">
            <section id="changePasswordForm">
                <p>
                    <a class="btn btn-info" href="javascript:history.back(-1)">Voltar</a>
                </p>
                <div class="simulacao" style="display:none">
                    <div class="alert alert-info" role="alert">
                        Multa: <strong id="penalty"></strong><br />
                        Juros de Mora diária: <strong id="dailyInterest"></strong><br />
                        Valor Total: <strong id="amountDue"></strong>

                        <input type="hidden" name="valueTotal" id="valueTotal" value="0" />
                    </div>
                </div>
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Simular</th>
                            <th>@Html.DisplayNameFor(m => m.DocumentNumber)</th>
                            <th>@Html.DisplayNameFor(m => m.Provider)</th>
                            <th>@Html.DisplayNameFor(m => m.Value)</th>
                            <th>@Html.DisplayNameFor(m => m.Penalty)</th>
                            <th>@Html.DisplayNameFor(m => m.MonthlyAccount)</th>
                            <th>@Html.DisplayNameFor(m => m.MaturityDate)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    <div class="custom-control custom-checkbox">
                                        @Html.CheckBox($"Simular-{item.Id}", new { @class = "checkbox-inline custom-control-input", value = item.Id})
                                        @Html.Label($"Simular-{item.Id}", " ", new { @class = "custom-control-label hidden" })
                                    </div>
                                </td>
                                <td>@Html.DisplayFor(m => item.DocumentNumber)</td>
                                <td>@Html.DisplayFor(m => item.Provider)</td>
                                <td>@Html.DisplayFor(m => item.Value)</td>
                                <td>@Html.DisplayFor(m => item.Penalty)</td>
                                <td>@(item.MonthlyAccount ? "Sim" : "Não")</td>
                                <td>@Html.DisplayFor(m => item.MaturityDate)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </section>
        </div>
    </div>
</div>
@section scripts{
    @Scripts.Render("~/bundles/datatables")
    <script type="text/javascript">
        $(() => {
            $('.table').DataTable({
                tabIndex: -1,
                scrollY: "380px",
                scrollCollapse: true,
                responsive: true,
                columnDefs: [
                    { className: "text-center", "targets": [0, 5, 6] }
                ],
                language: {
                    decimal: "",
                    emptyTable: "Sem dados disponíveis na tabela",
                    info: "Página _PAGE_ de _PAGES_",
                    infoEmpty: "Sem registros disponíveis",
                    infoFiltered: "(filtrados do total de _MAX_ registros)",
                    infoPostFix: "",
                    thousands: ",",
                    lengthMenu: "Exibir _MENU_ linhas por página",
                    loadingRecords: "Carregando...",
                    processing: "Processando...",
                    search: "Filtrar:",
                    zeroRecords: "Não encontrado",
                    paginate: {
                        first: "Primeiro",
                        last: "Último",
                        next: "Avançar",
                        previous: "Voltar"
                    },
                    aria: {
                        sortAscending: ":ativado para ordenação ascendente",
                        sortDescending: ":ativado para ordenação descendente"
                    }
                }
            });
        });

        $('input[type="checkbox"]').click(function () {
            var isChecked = $(this).is(":checked");
            $.ajax({
                dataType: "json",
                type: "GET",
                url: "/Simulator/Simular?id=" + $(this).val(),
                success: function (result) {
                    $(".simulacao").fadeIn("slide");

                    $(result).each(function (i) {
                        if (isChecked == true) {
                            $("#penalty").text(parseFloat($("#penalty").text() == "" ? "0" : $("#penalty").text()) + result.penaltySum);
                            $("#dailyInterest").text(parseFloat($("#dailyInterest").text() == "" ? "0" : $("#dailyInterest").text()) + result.dailyInterestSum);
                            $("#amountDue").text(parseFloat($("#amountDue").text() == "" ? "0" : $("#amountDue").text()) + result.amountDue);

                            $("#penalty").text(parseFloat($("#penalty").text()).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }));
                            $("#dailyInterest").text(parseFloat($("#dailyInterest").text()).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }));
                            $("#amountDue").text(parseFloat($("#amountDue").text()).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }));

                            $("html, body").animate({ scrollTop: 0 }, 600);
                        }
                        else {
                            $("#penalty").text(parseFloat($("#penalty").text() == "" ? "0" : $("#penalty").text()) - result.penaltySum);
                            $("#dailyInterest").text(parseFloat($("#dailyInterest").text() == "" ? "0" : $("#dailyInterest").text()) - result.dailyInterestSum);
                            $("#amountDue").text(parseFloat($("#amountDue").text() == "" ? "0" : $("#amountDue").text()) - result.amountDue);

                            $("#penalty").text(parseFloat($("#penalty").text()).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }));
                            $("#dailyInterest").text(parseFloat($("#dailyInterest").text()).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }));
                            $("#amountDue").text(parseFloat($("#amountDue").text()).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }));

                            if (parseInt($("#juros").text()) == 0) {
                                $(".simulacao").hide();
                            }
                        }

                    });
                    $(".simulacao").show();
                },
                error: function () {
                    $(".simulacao").hide();
                }
            });
        });

    </script>
}
