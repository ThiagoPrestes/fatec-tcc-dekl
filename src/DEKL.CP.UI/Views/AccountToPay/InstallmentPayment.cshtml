@model  DEKL.CP.UI.ViewModels.AccountsToPay.AccountToPayViewModel
@using DEKL.CP.UI.Extensions
@using DEKL.CP.Domain.Entities

@{
    ViewBag.Title = "Pagar";
    int diasVencidos = 0; decimal multaDiaria = 0; decimal multa = 0;
    bool isConta = Request.QueryString["Parcela"].Equals("0");
    var parcela = (List<Installment>)Model.Installments;
}

<h2>@ViewBag.Title</h2>
<div>
    <h4>Bancos</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(m => m.DocumentNumber)
        </dt>
        <dd>
            @Html.DisplayFor(m => m.DocumentNumber)
        </dd>

        @*se for vencido*@
        @if (!isConta && DateTime.Now > parcela.Find(obj => obj.Id == Convert.ToInt32(Request.QueryString["Parcela"])).MaturityDate ||  DateTime.Now > Model.MaturityDate)
        {
            <dt>
                Valor Vencido
            </dt>
            <dd>
                @(isConta ? Model.Value.ToString("C2") : parcela.Find(obj => obj.Id == Convert.ToInt32(Request.QueryString["Parcela"])).Value.ToString("C2"))
            </dd>
            <dt>
                Valor total com juros
            </dt>
            <dd>
                @{
                    if (isConta)
                    {
                        diasVencidos = (int)DateTime.Now.Subtract(new DateTime(Model.PaymentDate.Value.Year, Model.PaymentDate.Value.Month, Model.PaymentDate.Value.Day)).TotalDays;
                        Model.Value += ((Model.Value * Model.Penalty) / 100);
                        multaDiaria = (Model.Value * (diasVencidos * Model.DailyInterest) / 100);

                        @Html.Raw((Model.Value + multaDiaria).ToString("C2"))
                    }
                    else
                    {
                        var parcelaSelecionada = parcela.Find(obj => obj.Id == Convert.ToInt32(Request.QueryString["Parcela"]));
                        diasVencidos = (int)DateTime.Now.Subtract(new DateTime(parcelaSelecionada.PaymentDate.Value.Year, parcelaSelecionada.PaymentDate.Value.Month, parcelaSelecionada.PaymentDate.Value.Day)).TotalDays;
                        parcelaSelecionada.Value += ((parcelaSelecionada.Value * Model.Penalty) / 100);
                        multaDiaria = (parcelaSelecionada.Value * (diasVencidos * Model.DailyInterest) / 100);

                        @Html.Raw((parcelaSelecionada.Value + multaDiaria).ToString("C2"))
                    }
                }
            </dd>
        }
        else
        {
            <dt>
                @Html.DisplayNameFor(m => m.Value)
            </dt>
            <dd>
                @(isConta ? Model.Value.ToString("C2") : parcela.Find(obj => obj.Id == Convert.ToInt32(Request.QueryString["Parcela"])).Value.ToString("C2"))
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(m => m.Description)
        </dt>
        <dd>
            @(!string.IsNullOrEmpty(Model.Description) ? Model.Description : "Sem descrição")
        </dd>
    </dl>
</div>

<form action="@Url.Action("PaymentBoleto", "AccountToPay")" method="post">
    <input type="hidden" name="Id" value="@Model.Id" />
    <input type="hidden" name="valorParcela" value="@Request.QueryString["Parcela"]" />
    <div class="row">
        <div class="form-group col-md-3">
            @Html.DropDownList("PaymentInterna", ViewBag.InternalBankAccounts as SelectList, "Selecione a Conta Interna", new { @class = "form-control" })
        </div>
        <div class="form-group col-md-3">
            @Html.DropDownList("PaymentBancario", ViewBag.InternalBankAccounts as SelectList, "Selecione a Conta do Fornecedor", new { @class = "form-control" })
        </div>
        <div class="form-group col-md-3">
            @Html.DropDownListFor(m => m.PaymentType, DEKL.CP.Domain.Enums.PaymentType.BankDeposit.ToSelectList() as SelectList, new { @class = "form-control" })
        </div>
    </div>

    <p>
        <a href="#" class="btn btn-info" onclick="history.go(-1);">Voltar</a>
        <input type="submit" class="btn btn-info" id="PagarConta" value="Pagar" />
    </p>

</form>
